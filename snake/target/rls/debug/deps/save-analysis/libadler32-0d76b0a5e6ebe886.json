{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0","program":"/Users/volchan/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","adler32","/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=0d76b0a5e6ebe886","-C","extra-filename=-0d76b0a5e6ebe886","--out-dir","/Users/volchan/code/volchan/udemy/rust/snake/target/rls/debug/deps","-L","dependency=/Users/volchan/code/volchan/udemy/rust/snake/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/volchan/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/volchan/code/volchan/udemy/rust/snake/target/rls/debug/deps/libadler32-0d76b0a5e6ebe886.rmeta"},"prelude":{"crate_id":{"name":"adler32","disambiguator":[13293343896968075565,15933565763958444885]},"crate_root":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src","external_crates":[{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5902495869598878631,6483651549774204679]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[12311488937759207811,9591695617658421232]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13642764918293034548,9567326413417207759]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[12678783859402539130,11033699271647822562]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13989086203811079768,14781321679734955535]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18262239609673298908,5174085264251780333]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15596655843449967889,8729491543963844827]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8633493352746497996,3308549486174864674]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[9090856330303166257,15266389826979080272]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10275868503320404072,15700038594031858524]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[16931781941529345914,7757858263785678856]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17386117254425836477,8366695672852535875]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6497267535012603728,15523194060056832509]}},{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[5307688171077319232,12990389752959085457]}}],"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":0,"byte_end":9794,"line_start":1,"line_end":325,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":0,"byte_end":9794,"line_start":1,"line_end":325,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":22}],"decl_id":null,"docs":" A minimal implementation of Adler32 for Rust.","sig":null,"attributes":[{"value":"! A minimal implementation of Adler32 for Rust.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":0,"byte_end":49,"line_start":1,"line_end":1,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":50,"byte_end":53,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This provides the simple method adler32(), that exhausts a Read and","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":54,"byte_end":125,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"! computes the Adler32 hash, as well as the RollingAdler32 struct, that can","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":126,"byte_end":203,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"! build a hash byte-by-byte, allowing to 'forget' past bytes in a rolling","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":204,"byte_end":279,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"! fashion.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":280,"byte_end":292,"line_start":6,"line_end":6,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":293,"byte_end":296,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! The adler32 code has been translated (as accurately as I could manage) from","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":297,"byte_end":376,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"! the zlib implementation.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":377,"byte_end":405,"line_start":9,"line_end":9,"column_start":1,"column_end":29}},{"value":"forbid(unsafe_code)","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":407,"byte_end":430,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"no_std","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":431,"byte_end":441,"line_start":12,"line_end":12,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":25},"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3017,"byte_end":3031,"line_start":92,"line_end":92,"column_start":12,"column_end":26},"name":"RollingAdler32","qualname":"::RollingAdler32","value":"RollingAdler32 {  }","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":" A rolling version of the Adler32 hash, which can 'forget' past bytes.","sig":null,"attributes":[{"value":"/ A rolling version of the Adler32 hash, which can 'forget' past bytes.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":2709,"byte_end":2782,"line_start":86,"line_end":86,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":2783,"byte_end":2786,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Calling remove() will update the hash to the value it would have if that","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":2787,"byte_end":2863,"line_start":88,"line_end":88,"column_start":1,"column_end":77}},{"value":"/ past byte had never been fed to the algorithm. This allows you to get the","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":2864,"byte_end":2941,"line_start":89,"line_end":89,"column_start":1,"column_end":78}},{"value":"/ hash of a rolling window very efficiently.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":2942,"byte_end":2988,"line_start":90,"line_end":90,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3260,"byte_end":3263,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"new","qualname":"<RollingAdler32>::new","value":"fn () -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty Adler32 context (with hash 1).\n","sig":null,"attributes":[{"value":"/ Creates an empty Adler32 context (with hash 1).","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3197,"byte_end":3248,"line_start":104,"line_end":104,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3397,"byte_end":3407,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"from_value","qualname":"<RollingAdler32>::from_value","value":"fn (adler32: u32) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Creates an Adler32 context with the given initial value.\n","sig":null,"attributes":[{"value":"/ Creates an Adler32 context with the given initial value.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3325,"byte_end":3385,"line_start":109,"line_end":109,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3636,"byte_end":3647,"line_start":117,"line_end":117,"column_start":12,"column_end":23},"name":"from_buffer","qualname":"<RollingAdler32>::from_buffer","value":"fn (buffer: &[u8]) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Convenience function initializing a context from the hash of a buffer.\n","sig":null,"attributes":[{"value":"/ Convenience function initializing a context from the hash of a buffer.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3550,"byte_end":3624,"line_start":116,"line_end":116,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3830,"byte_end":3834,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"hash","qualname":"<RollingAdler32>::hash","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current hash.\n","sig":null,"attributes":[{"value":"/ Returns the current hash.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3789,"byte_end":3818,"line_start":123,"line_end":123,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3982,"byte_end":3988,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"remove","qualname":"<RollingAdler32>::remove","value":"fn (&mut self, size: usize, byte: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes the given `byte` that was fed to the algorithm `size` bytes ago.\n","sig":null,"attributes":[{"value":"/ Removes the given `byte` that was fed to the algorithm `size` bytes ago.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3894,"byte_end":3970,"line_start":128,"line_end":128,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":4327,"byte_end":4333,"line_start":138,"line_end":138,"column_start":12,"column_end":18},"name":"update","qualname":"<RollingAdler32>::update","value":"fn (&mut self, byte: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Feeds a new `byte` to the algorithm to update the hash.\n","sig":null,"attributes":[{"value":"/ Feeds a new `byte` to the algorithm to update the hash.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":4256,"byte_end":4315,"line_start":137,"line_end":137,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":4564,"byte_end":4577,"line_start":145,"line_end":145,"column_start":12,"column_end":25},"name":"update_buffer","qualname":"<RollingAdler32>::update_buffer","value":"fn (&mut self, buffer: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Feeds a vector of bytes to the algorithm to update the hash.\n","sig":null,"attributes":[{"value":"/ Feeds a vector of bytes to the algorithm to update the hash.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":4488,"byte_end":4552,"line_start":144,"line_end":144,"column_start":5,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":6186,"byte_end":6193,"line_start":201,"line_end":201,"column_start":8,"column_end":15},"name":"adler32","qualname":"::adler32","value":"fn <R> (mut reader: R) -> std::io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Consume a Read object and returns the Adler32 hash.\n","sig":null,"attributes":[{"value":"/ Consume a Read object and returns the Adler32 hash.","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":6099,"byte_end":6154,"line_start":199,"line_end":199,"column_start":1,"column_end":56}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":6155,"byte_end":6178,"line_start":200,"line_end":200,"column_start":1,"column_end":24}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3078,"byte_end":3092,"line_start":97,"line_end":97,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3176,"byte_end":3190,"line_start":103,"line_end":103,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3078,"byte_end":3092,"line_start":97,"line_end":97,"column_start":18,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":25},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/Users/volchan/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.1.0/src/lib.rs","byte_start":3176,"byte_end":3190,"line_start":103,"line_end":103,"column_start":6,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":25},"to":{"krate":4294967295,"index":4294967295}}]}